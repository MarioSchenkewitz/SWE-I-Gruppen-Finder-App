@model CreateEditGroupContainer

@{
    string action;
    string groupName;
    List<ActivityCategoryType> checkedActivities;
    GenderRestrictionType checkedGenderRestriction;
    int minParticipants;
    int maxParticipants;
    string meetupDateTime;
    MeetupRecurrenceType meetupRecurrrence;
    string submitButtonText;
    bool isPrivate;
    string latitude;
    string longitude;

    bool editMode = Model.SportGroupToEdit != null;
    if (editMode)
    {
        ViewData["Title"] = "Gruppe bearbeiten";
        action = "UpdateGroup";
        groupName = Model.SportGroupToEdit.GroupName;
        checkedActivities = Model.SportGroupToEdit.ActivityTags.Select(t => t.ActivityCategory).ToList();
        checkedGenderRestriction = Model.SportGroupToEdit.GenderRestrictionTag.GenderRestriction;
        minParticipants = Model.SportGroupToEdit.Participants.Count;
        if (minParticipants < ApplicationConstants.MinSportGroupParticipants)
            minParticipants = ApplicationConstants.MinSportGroupParticipants;

        maxParticipants = Model.SportGroupToEdit.MaxParticipants;
        meetupDateTime = Model.SportGroupToEdit.MeetupDate.ToString("yyyy-MM-ddTHH:mm");
        meetupRecurrrence = Model.SportGroupToEdit.MeetupRecurrence;
        isPrivate = Model.SportGroupToEdit.IsPrivate;
        latitude = Model.SportGroupToEdit.Latitude.ToString(CultureInfo.InvariantCulture);
        longitude = Model.SportGroupToEdit.Longitude.ToString(CultureInfo.InvariantCulture);
        submitButtonText = "Gruppe bearbeiten";
    }
    else
    {
        ViewData["Title"] = "Gruppe erstellen";
        action = "AddGroup";
        groupName = string.Empty;
        checkedActivities = Enumerable.Empty<ActivityCategoryType>().ToList();
        checkedGenderRestriction = GenderRestrictionType.NoRestriction;
        minParticipants = ApplicationConstants.MinSportGroupParticipants;
        maxParticipants = ApplicationConstants.MaxSportGroupParticipants;
        meetupDateTime = DateTime.Now.AddDays(1).ToString("yyyy-MM-ddTHH:mm");
        meetupRecurrrence = MeetupRecurrenceType.OneTime;
        isPrivate = false;
        latitude = string.Empty;
        longitude = string.Empty;
        submitButtonText = "Gruppe erstellen";
    }
}

<link rel="stylesheet" href="~/css/createeditgroup.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
      integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
      crossorigin="" />

<div class="viewcontainer">
    <div class="inline-block">
        <form class="propertiesformgrid" asp-controller="SportGroup" asp-action="@action">
            <h3 class="propertiesheading">Eigenschaften</h3>

            <b id="groupnameheading">Gruppenname</b>
            <input id="groupname" type="text" class="textfield" name="GroupName" value="@groupName" maxlength="@ApplicationConstants.MaxGroupNameLength" />

            <div>
                <b id="activityheading">Aktivitäten</b>
            </div>
            <div class="activitygrid">
                @foreach (var activityTag in Model.AllActivityTags)
                {
                    <div>
                        <input type="checkbox" name="ActivityCategories" value="@activityTag.ActivityCategory" checked="@checkedActivities.Contains(activityTag.ActivityCategory)" />
                        <img src="@activityTag.IconUrl" title="@activityTag.ActivityCategory" />
                    </div>
                }
            </div>

            <b>Geschlechtsbeschränkung</b>
            <div class="gendergrid">
                @foreach (var genderRestrictionTag in Model.AllGenderRestrictionTags)
                {
                    <div>
                        <input type="radio" name="GenderRestriction" value="@genderRestrictionTag.GenderRestriction" checked="@(checkedGenderRestriction == genderRestrictionTag.GenderRestriction)" />
                        <img src="@genderRestrictionTag.IconUrl" title="@genderRestrictionTag.GenderRestriction" />
                    </div>
                }
            </div>

            <b>Gruppen Privatsphäre</b>
            <select name="IsPrivate" class="isprivateselector hcenter">
                <option value="false" selected="@(!isPrivate)">Öffentlich</option>
                <option value="true" selected="@isPrivate">Privat</option>
            </select>

            <b id="meetuptimeheading">Datum und Zeit</b>
            <div class="meetuptimewrapper">
                <input id="datetimecalender" type="datetime-local" class="hcenter" name="MeetupDate" value="@meetupDateTime" min="@DateTime.Today.ToString("yyyy-MM-ddTHH:mm")" />
                <select name="MeetupRecurrence">
                    <option value="OneTime" selected="@(meetupRecurrrence == MeetupRecurrenceType.OneTime)">Einmalig</option>
                    <option value="Daily" selected="@(meetupRecurrrence == MeetupRecurrenceType.Daily)">Täglich</option>
                    <option value="Weekly" selected="@(meetupRecurrrence == MeetupRecurrenceType.Weekly)">Wöchentlich</option>
                    <option value="Monthly" selected="@(meetupRecurrrence == MeetupRecurrenceType.Monthly)">Monatlich</option>
                </select>
            </div>

            <b id="maxparticipantsheading">Max. Teilnehmer</b>
            <div>
                <input id="participantsslider" class="slider" type="range" min="@minParticipants" max="@maxParticipants" name="MaxParticipants" value="@maxParticipants" />
                <div class="right">
                    <input id="participantsslidervalue" type="number" class="valuelabel" min="2" max="20" />
                    <span>Personen</span>
                </div>
            </div>

            @if (editMode)
            {
                <input type="hidden" name="groupId" value="@Model.SportGroupToEdit.Id" />
            }

            <b id="participantsheading">Teilnehmer</b>
            <div class="participantswrapper">
                @{
                    if (editMode)
                    {
                        foreach (var participant in Model.SportGroupToEdit.Participants)
                        {
                            <div class="participantentry">
                                <input type="hidden" name="ParticipantsIds" value="@participant.GoogleId" />
                                <span class="vcenter"><img src="@participant.PictureUrl" alt="Avatar von @participant.Username" class="rounded-circle avatar" />@participant.Username</span>

                                @if (Model.SportGroupToEdit.CreatedBy != participant)
                                {
                                    <input class="dangerbutton center removeparticipantbutton" type="button" value="Entfernen" />
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="participantentry">
                            <input type="hidden" name="ParticipantsIds" value="@Model.GroupCreator.GoogleId" />
                            <span class="vcenter"><img src="@Model.GroupCreator.PictureUrl" alt="Avatar von @Model.GroupCreator.Username" class="rounded-circle avatar" />@Model.GroupCreator.Username</span>
                        </div>
                    }
                }
            </div>

            <input id="latitude" type="hidden" name="Latitude" value="@latitude" />
            <input id="longitude" type="hidden" name="Longitude" value="@longitude" />
            <input id="submitbutton" type="submit" class="primarybutton hcenter" value="@submitButtonText" />
        </form>
    </div>

    <div id="mapborder">
        <div class="use-all-space" id="map"></div>
    </div>

</div>

<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
        integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
        crossorigin=""></script>
<script src="~/js/createeditgroup.js" asp-append-version="true"></script>

