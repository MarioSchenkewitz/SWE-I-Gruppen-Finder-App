// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Speet.Models;

namespace Speet.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("ActivityTagSportGroup", b =>
                {
                    b.Property<string>("ActivityTagsActivityCategory")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignedGroupsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityTagsActivityCategory", "AssignedGroupsId");

                    b.HasIndex("AssignedGroupsId");

                    b.ToTable("Assigned");
                });

            modelBuilder.Entity("Speet.Models.ActivityTag", b =>
                {
                    b.Property<string>("ActivityCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityCategory");

                    b.ToTable("ActivityTag");
                });

            modelBuilder.Entity("Speet.Models.GenderRestrictionTag", b =>
                {
                    b.Property<string>("GenderRestriction")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GenderRestriction");

                    b.ToTable("GenderRestrictionTag");
                });

            modelBuilder.Entity("Speet.Models.SportGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedByGoogleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GenderRestrictionTagGenderRestriction")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MeetupDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetupRecurrence")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByGoogleId");

                    b.HasIndex("GenderRestrictionTagGenderRestriction");

                    b.ToTable("SportGroup");
                });

            modelBuilder.Entity("Speet.Models.User", b =>
                {
                    b.Property<string>("GoogleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GoogleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SportGroupUser", b =>
                {
                    b.Property<Guid>("JoinedGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParticipantsGoogleId")
                        .HasColumnType("TEXT");

                    b.HasKey("JoinedGroupsId", "ParticipantsGoogleId");

                    b.HasIndex("ParticipantsGoogleId");

                    b.ToTable("Joins");
                });

            modelBuilder.Entity("ActivityTagSportGroup", b =>
                {
                    b.HasOne("Speet.Models.ActivityTag", null)
                        .WithMany()
                        .HasForeignKey("ActivityTagsActivityCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Speet.Models.SportGroup", null)
                        .WithMany()
                        .HasForeignKey("AssignedGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Speet.Models.SportGroup", b =>
                {
                    b.HasOne("Speet.Models.User", "CreatedBy")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("CreatedByGoogleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Speet.Models.GenderRestrictionTag", "GenderRestrictionTag")
                        .WithMany("AssignedGroups")
                        .HasForeignKey("GenderRestrictionTagGenderRestriction");

                    b.Navigation("CreatedBy");

                    b.Navigation("GenderRestrictionTag");
                });

            modelBuilder.Entity("SportGroupUser", b =>
                {
                    b.HasOne("Speet.Models.SportGroup", null)
                        .WithMany()
                        .HasForeignKey("JoinedGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Speet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsGoogleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Speet.Models.GenderRestrictionTag", b =>
                {
                    b.Navigation("AssignedGroups");
                });

            modelBuilder.Entity("Speet.Models.User", b =>
                {
                    b.Navigation("CreatedGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
