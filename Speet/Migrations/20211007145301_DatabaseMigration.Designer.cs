// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Speet.Models;

namespace Speet.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211007145301_DatabaseMigration")]
    partial class DatabaseMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Speet.Models.SportGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedByGoogleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MeetupDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByGoogleId");

                    b.ToTable("SportGroup");
                });

            modelBuilder.Entity("Speet.Models.Tag", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Description");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Speet.Models.User", b =>
                {
                    b.Property<long>("GoogleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("GoogleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SportGroupTag", b =>
                {
                    b.Property<long>("AssignedGroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagsDescription")
                        .HasColumnType("TEXT");

                    b.HasKey("AssignedGroupsId", "TagsDescription");

                    b.HasIndex("TagsDescription");

                    b.ToTable("Assigned");
                });

            modelBuilder.Entity("SportGroupUser", b =>
                {
                    b.Property<long>("JoinedGroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParticipantsGoogleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("JoinedGroupsId", "ParticipantsGoogleId");

                    b.HasIndex("ParticipantsGoogleId");

                    b.ToTable("Joins");
                });

            modelBuilder.Entity("Speet.Models.SportGroup", b =>
                {
                    b.HasOne("Speet.Models.User", "CreatedBy")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("CreatedByGoogleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("SportGroupTag", b =>
                {
                    b.HasOne("Speet.Models.SportGroup", null)
                        .WithMany()
                        .HasForeignKey("AssignedGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Speet.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsDescription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportGroupUser", b =>
                {
                    b.HasOne("Speet.Models.SportGroup", null)
                        .WithMany()
                        .HasForeignKey("JoinedGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Speet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsGoogleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Speet.Models.User", b =>
                {
                    b.Navigation("CreatedGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
